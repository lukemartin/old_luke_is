(function() {
  var $, History, PageAnimator,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  $ = jQuery;

  History = window.History;

  $.fn.extend({
    middleAlign: function(options) {
      return $(window).resize((function(_this) {
        return function() {
          return _this.each(function() {
            var h, wh;
            wh = $('.header-wrap').outerHeight();
            h = $(this).outerHeight();
            if (wh > h) {
              return $(this).css('top', (wh - h) / 2);
            }
          });
        };
      })(this)).resize();
    }
  });

  $('.js-middle-align').middleAlign();

  $.fn.extend({
    maxHeight: function(options) {
      return $(window).resize((function(_this) {
        return function() {
          return _this.each(function() {
            var wh;
            wh = $(window).outerHeight();
            return $(this).css('height', wh);
          });
        };
      })(this)).resize();
    }
  });

  $('.js-max-height').maxHeight();

  $.fn.extend({
    marginTop: function(options) {
      return $(window).resize((function(_this) {
        return function() {
          return _this.each(function() {
            var wh;
            wh = $(window).outerHeight();
            return $(this).css('top', wh);
          });
        };
      })(this)).resize();
    }
  });

  $('.js-margin-top').marginTop();

  $.fn.extend({
    navLinks: function(options) {
      return this.each(function() {
        return $(this).on('click touchstart', 'a', function(e) {
          var newHeight, newTop, top;
          e.preventDefault();
          newHeight = 300;
          top = $('.js-middle-align').css('top');
          newTop = (300 - $('.js-middle-align').outerHeight()) / 2;
          $('.js-middle-align').animate({
            top: newTop
          }, 150);
          return $('.js-max-height').animate({
            height: 300
          }, 150);
        });
      });
    }
  });

  $.fn.extend({
    ajaxLoader: function(options) {
      var binders, currentLevel, getLevel, linkClicked;
      binders = function() {
        return $('[data-history]').on('click touchstart', linkClicked);
      };
      getLevel = function(url) {
        return url.split('/').length - 1;
      };
      linkClicked = function(e) {
        var href, level;
        e.preventDefault();
        href = $(e.currentTarget).attr('href');
        level = getLevel(href);
        return console.log(level);
      };
      currentLevel = getLevel(document.location.pathname);
      console.log(currentLevel);
      return binders();
    }
  });

  PageAnimator = (function() {
    PageAnimator.prototype.defaults = {};

    function PageAnimator(el, options) {
      this.onStateChange = __bind(this.onStateChange, this);
      this.onLinkClicked = __bind(this.onLinkClicked, this);
      this.options = $.extend({}, this.defaults, options);
      this.$el = $(el);
      this.currentLevel = this.getLevel(document.location.pathname);
      this.binders();
    }

    PageAnimator.prototype.binders = function() {
      this.$el.on('click touchstart', '[data-pa]', this.onLinkClicked);
      return History.Adapter.bind(window, 'statechange', this.onStateChange);
    };

    PageAnimator.prototype.onLinkClicked = function(e) {
      var href, level, title;
      e.preventDefault();
      href = $(e.currentTarget).attr('href');
      title = $(e.currentTarget).attr('title') + ' - somename';
      level = this.getLevel(href);
      return $.get(href).done(function(data) {
        var content;
        content = $(data).find('#content').html();
        return History.pushState({
          content: content,
          level: level
        }, title, href);
      }).fail(function() {
        return console.log('failed :(');
      });
    };

    PageAnimator.prototype.onStateChange = function() {
      var content, level, state;
      state = History.getState();
      level = state.data.level;
      content = state.data.content;
      if (level === this.currentLevel) {
        this.animateSibling(content);
      }
      if (level < this.currentLevel) {
        this.animateBackwards(content);
      }
      if (level > this.currentLevel) {
        this.animateForwards(content);
      }
      return this.currentLevel = level;

      /*
      $('#content').fadeOut(125, ->
        $(this).html(state.data.content).fadeIn(125)
        $(window).scrollTop(0)
      )
       */

      /*
      $('#content').html(state.data.content)
       */
    };

    PageAnimator.prototype.animateSibling = function(content) {
      return $('#content').html(content);
    };

    PageAnimator.prototype.animateBackwards = function(content) {
      var $content, $currentSection;
      $content = $(content);
      $content.addClass('anim-left');
      $currentSection = $('#content .section-wrap');
      $('#content').append($content);
      return setTimeout(function() {
        $currentSection.addClass('anim-right');
        $content.removeClass('anim-left');
        return setTimeout(function() {
          return $currentSection.remove();
        }, 2000);
      }, 50);
    };

    PageAnimator.prototype.animateForwards = function(content) {
      var $content, $currentSection;
      $content = $(content);
      $content.addClass('anim-right');
      $currentSection = $('#content .section-wrap');
      $('#content').append($content);
      return setTimeout(function() {
        $currentSection.addClass('anim-left');
        $content.removeClass('anim-right');
        return setTimeout(function() {
          return $currentSection.remove();
        }, 500);
      }, 50);

      /*
      $('#content').slideUp(125, ->
        $(this).html(content).slideDown(125)
      )
       */
    };

    PageAnimator.prototype.getLevel = function(url) {
      return url.split('/').length - 1;
    };

    return PageAnimator;

  })();

  $.fn.extend({
    pageAnimator: function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.each(function() {
        var $this;
        $this = $(this);
        return new PageAnimator(this, {});
      });
    }
  });

  $('body').pageAnimator();

}).call(this);

//# sourceMappingURL=data:application/json;base64,