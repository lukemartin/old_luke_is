/* normalize.css v3.0.1 | MIT License | git.io/normalize */
html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}
body {
  margin: 0;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
a {
  background: transparent;
}
a:active,
a:hover {
  outline: 0;
}
abbr[title] {
  border-bottom: 1px dotted;
}
b,
strong {
  font-weight: bold;
}
dfn {
  font-style: italic;
}
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
mark {
  background: #ff0;
  color: #000;
}
small {
  font-size: 80%;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
figure {
  margin: 1em 40px;
}
hr {
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}
pre {
  overflow: auto;
}
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}
button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}
button {
  overflow: visible;
}
button,
select {
  text-transform: none;
}
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}
button[disabled],
html input[disabled] {
  cursor: default;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
input {
  line-height: normal;
}
input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
input[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box; /* 2 */
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}
legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}
textarea {
  overflow: auto;
}
optgroup {
  font-weight: bold;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
td,
th {
  padding: 0;
}
@font-face {
  font-family: 'lm';
  src: url("/fonts/lm.eot?x08t0v");
  src: url("/fonts/lm.eot?#iefixx08t0v") format('embedded-opentype'), url("/fonts/lm.woff?x08t0v") format('woff'), url("/fonts/lm.ttf?x08t0v") format('truetype'), url("/fonts/lm.svg?x08t0v#lm") format('svg');
  font-weight: normal;
  font-style: normal;
}
[class^="icon-"],
[class*=" icon-"] {
  font-family: 'lm';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
/* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.icon-codepen:before {
  content: "\e60b";
}
.icon-bitbucket:before {
  content: "\e60a";
}
.icon-arrow-up:before {
  content: "\e600";
}
.icon-arrow-right:before {
  content: "\e601";
}
.icon-arrow-down:before {
  content: "\e602";
}
.icon-arrow-left:before {
  content: "\e603";
}
.icon-stack:before {
  content: "\e604";
}
.icon-link:before {
  content: "\e60d";
}
.icon-newtab:before {
  content: "\e60c";
}
.icon-twitter:before {
  content: "\e605";
}
.icon-github:before {
  content: "\e606";
}
.icon-linkedin:before {
  content: "\e607";
}
.icon-lastfm:before {
  content: "\e608";
}
.icon-mail:before {
  content: "\e609";
}
.image,
figure {
  position: relative;
  width: 100%;
}
.image img,
figure img {
  display: block;
  width: 100%;
}
figure {
  margin: 0;
}
figcaption {
  border-left: 4px solid #354b57;
  margin-top: 5px;
  padding: 4px 10px 3px;
}
*,
*:before,
*:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
body {
  background-color: #f2f2f2;
  overflow-y: scroll;
  overflow-x: hidden;
}
.content-wrap .content {
  overflow: hidden;
}
.section-wrap {
  background-color: #fff;
}
.section-wrap section {
  padding: 10px;
  position: relative;
}
.section-wrap.alt {
  background-color: #f2f2f2;
}
@media (min-width: 800px) {
  .section-wrap section {
    margin: 0 auto;
    padding: 20px 0;
    width: 800px;
  }
  .cols {
    overflow: hidden;
  }
  .cols.cols-2 {
    margin-left: -5%;
  }
  .cols.cols-2 .col {
    float: left;
    margin-left: 5%;
    width: 45%;
  }
  .cols.cols-3 {
    margin-left: -5%;
  }
  .cols.cols-3 .col {
    float: left;
    margin-left: 5%;
    width: 28.33%;
  }
}
body {
  color: #354b57;
  font-family: "proxima-nova", sans-serif;
  font-weight: 100;
  font-size: 16px;
  letter-spacing: 2px;
}
h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  font-weight: 100;
  margin: 16px 0;
}
h1,
.h1 {
  font-size: 40px;
}
h2,
.h2 {
  font-size: 32px;
}
h3,
.h3 {
  font-size: 28px;
}
h4,
.h4 {
  font-size: 24px;
}
h5,
.h5 {
  font-size: 16px;
}
h6,
.h6 {
  font-size: 16px;
}
ul.unstyled,
ol.unstyled {
  list-style-type: none;
  margin: 0;
  padding: 0;
}
a {
  color: #000;
  text-decoration: none;
}
p {
  font-size: 16px;
}
dl dt {
  font-weight: 100;
}
dl dd {
  margin-left: 30px;
  margin-bottom: 10px;
}
@media (min-width: 800px) {
  dl {
    overflow: hidden;
  }
  dl dl,
  dl dt {
    display: inline-block;
    word-wrap: break-word;
  }
  dl dt {
    float: left;
    width: 25%;
  }
  dl dd {
    float: left;
    margin-left: 0;
    width: 75%;
  }
}
.text-center {
  text-align: center;
}
.hero {
  text-align: center;
  margin: 0 auto;
}
.hero p {
  font-size: 40px;
  line-height: 1.5;
  margin: 0;
}
.hero span {
  background-color: #354b57;
  color: #fff;
  padding: 5px 10px;
}
@media (min-width: 800px) {
  .hero {
    width: 60%;
  }
}
.avatar {
  background-color: #fff;
  -webkit-border-radius: 50%;
  border-radius: 50%;
  margin: 0 auto;
  width: 150px;
  height: 150px;
  overflow: hidden;
  position: relative;
}
.avatar img {
  -webkit-border-radius: 50%;
  border-radius: 50%;
  width: 140px;
  height: 140px;
  position: relative;
  top: 5px;
  left: 5px;
}
.three-thing {
  position: relative;
}
.three-thing .left-part {
  text-align: center;
}
.three-thing .right-part {
  text-align: center;
}
@media (min-width: 800px) {
  .three-thing {
    overflow: hidden;
    min-height: 155px;
  }
  .three-thing .left-part,
  .three-thing .right-part {
    width: 35%;
    padding-top: 40px;
  }
  .three-thing .left-part {
    float: left;
    text-align: right;
  }
  .three-thing .right-part {
    float: right;
    text-align: left;
  }
  .three-thing .avatar {
    position: absolute;
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
  }
}
.button {
  display: inline-block;
  background-color: #354b57;
  color: #fff;
  padding: 10px 15px;
}
.header-wrap {
  background: transparent url("/images/header-bg-blue.jpg") no-repeat center center;
  padding: 10px 0;
  position: relative;
}
.header-wrap .main-header {
  position: relative;
  padding: 10px;
  width: 100%;
}
.header-wrap .main-header .name {
  font-size: 26px;
}
.header-wrap .main-header .name a {
  color: #fff;
}
.header-wrap .main-header .name span {
  color: #ffc5cf;
}
.header-wrap .main-header .name h1 {
  display: inline;
  font-size: inherit;
  margin: 0;
}
@media (min-width: 800px) {
  .header-wrap {
    padding: 30px 0;
  }
  .header-wrap .main-header {
    margin: 0 auto;
    width: 800px;
  }
}
.main-nav {
  margin-top: 10px;
}
.main-nav li {
  display: inline;
  margin-right: 5px;
}
.main-nav li a {
  color: #fff;
  font-size: 17px;
  text-transform: lowercase;
}
.main-nav li.active a {
  color: #ffc5cf;
}
@media (min-width: 800px) {
  .main-nav {
    position: absolute;
    top: 5px;
    right: 0;
  }
  .main-nav li {
    margin-right: 0;
    margin-left: 5px;
  }
}
.project {
  overflow: hidden;
}
.project .project-meta {
  text-align: center;
}
@media (min-width: 800px) {
  .project {
    position: relative;
  }
  .project .project-image {
    float: right;
    width: 37.5%;
  }
  .project .project-meta {
    width: 52.5%;
    top: 50%;
    left: 5%;
    position: absolute;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  .alt .project-image {
    float: left;
  }
  .alt .project-meta {
    left: auto;
    right: 5%;
  }
}
.contact-grid {
  margin-left: -3%;
  overflow: hidden;
}
.contact-grid .contact-grid-item {
  background-color: #f2f2f2;
  float: left;
  margin-left: 3%;
  margin-bottom: 3%;
  padding: 30px 10px;
  width: 47%;
}
.contact-grid .contact-grid-item .contact-grid-header {
  display: none;
}
.contact-grid .contact-grid-item .contact-grid-icon {
  text-align: center;
  font-size: 30px;
}
.contact-grid .contact-grid-item .contact-grid-val {
  white-space: nowrap;
  text-align: center;
  -o-text-overflow: ellipsis;
  text-overflow: ellipsis;
  overflow: hidden;
}
.contact-grid .contact-grid-item:hover,
.contact-grid .contact-grid-item:focus {
  background-color: #354b57;
  color: #f2f2f2;
  -webkit-transition: all 0.1s ease-in-out;
  -moz-transition: all 0.1s ease-in-out;
  -o-transition: all 0.1s ease-in-out;
  -ms-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
}
@media (min-width: 800px) {
  .contact-grid {
    margin-left: -1%;
  }
  .contact-grid .contact-grid-item {
    margin-left: 1%;
    margin-bottom: 1%;
    width: 32.33%;
  }
}
/*# sourceMappingURL=data:application/json;base64, */